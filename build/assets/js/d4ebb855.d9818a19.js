"use strict";(self.webpackChunkDonotForget=self.webpackChunkDonotForget||[]).push([[8749],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>u});var i=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,i)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,i,n=function(e,t){if(null==e)return{};var o,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)o=r[i],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)o=r[i],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=i.createContext({}),m=function(e){var t=i.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},p=function(e){var t=m(e.components);return i.createElement(l.Provider,{value:t},e.children)},c="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var o=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=m(o),h=n,u=c["".concat(l,".").concat(h)]||c[h]||k[h]||r;return o?i.createElement(u,a(a({ref:t},p),{},{components:o})):i.createElement(u,a({ref:t},p))}));function u(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=o.length,a=new Array(r);a[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:n,a[1]=s;for(var m=2;m<r;m++)a[m]=o[m];return i.createElement.apply(null,a)}return i.createElement.apply(null,o)}h.displayName="MDXCreateElement"},2930:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var i=o(7462),n=(o(7294),o(3905));const r={},a="Hooks",s={unversionedId:"git/hooks",id:"git/hooks",title:"Hooks",description:"Git hooks provide developers with the ability to run scripts during git executions. Usually, scripts can be written in Shell, Perl, Python, Javascript or Ruby.",source:"@site/docs/git/hooks.md",sourceDirName:"git",slug:"/git/hooks",permalink:"/docs/git/hooks",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/git/hooks.md",tags:[],version:"current",frontMatter:{},sidebar:"DEVOPS",next:{title:"0. Introduction",permalink:"/docs/shell/introduction"}},l={},m=[{value:"Client-side Hooks",id:"client-side-hooks",level:2},{value:"1. pre-commit",id:"1-pre-commit",level:3},{value:"2. prepare-commit-msg",id:"2-prepare-commit-msg",level:3},{value:"3. commit-msg",id:"3-commit-msg",level:3},{value:"4. post-commit",id:"4-post-commit",level:3},{value:"5. pre-merge-commit",id:"5-pre-merge-commit",level:3},{value:"6. post-merge",id:"6-post-merge",level:3},{value:"7. pre-rebase",id:"7-pre-rebase",level:3},{value:"8. post-rewrite",id:"8-post-rewrite",level:3},{value:"9. post-checkout",id:"9-post-checkout",level:3},{value:"Server-side Hooks",id:"server-side-hooks",level:2},{value:"Tools for hooks",id:"tools-for-hooks",level:2},{value:"Reference",id:"reference",level:2}],p={toc:m};function c(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,i.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"hooks"},"Hooks"),(0,n.kt)("p",null,"Git hooks provide developers with the ability to run scripts during git executions. Usually, scripts can be written in Shell, Perl, Python, Javascript or Ruby."),(0,n.kt)("p",null,"There are two groups of hooks:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"client-side"),(0,n.kt)("br",null),"\nHooks run on a ",(0,n.kt)("strong",{parentName:"li"},"local git repository")," when executing commands such as merge, commit, checkout and push."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"server-side"),(0,n.kt)("br",null),"\nHooks run on a ",(0,n.kt)("strong",{parentName:"li"},"remote git repository")," when receiving a push from clients and updating branches.")),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("ul",{parentName:"admonition"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"The default path of hooks is ",(0,n.kt)("strong",{parentName:"p"},".git/hooks"),", and it can be changed by ",(0,n.kt)("inlineCode",{parentName:"p"},"git config core.hookspath <path>"),".")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"You may encounter the error: ",(0,n.kt)("em",{parentName:"p"},'"The ',(0,n.kt)("strong",{parentName:"em"},"<path",">")," hook was ignored because it's not set as executable\""),". To use ",(0,n.kt)("inlineCode",{parentName:"p"},"chmod +x <path>")," to set the ",(0,n.kt)("strong",{parentName:"p"},"<path",">")," as executable.")))),(0,n.kt)("br",null),(0,n.kt)("h2",{id:"client-side-hooks"},"Client-side Hooks"),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"Here introduces some commonly used hooks.")),(0,n.kt)("h3",{id:"1-pre-commit"},"1. pre-commit"),(0,n.kt)("p",null,"The hook is invoked immediately by ",(0,n.kt)("inlineCode",{parentName:"p"},"git commit"),", it can be bypassed with ",(0,n.kt)("inlineCode",{parentName:"p"},"--no-verify"),". It takes no arugements, and you can exit with non-zero to abort the commit. Usually, we run code testing, linting or formatting inside this hook."),(0,n.kt)("h3",{id:"2-prepare-commit-msg"},"2. prepare-commit-msg"),(0,n.kt)("p",null,"The hook is invoked by ",(0,n.kt)("inlineCode",{parentName:"p"},"git commit")," right after creating default commit message, and before the editor is fired, and it can't be skipped by ",(0,n.kt)("inlineCode",{parentName:"p"},"--no-verify"),". We can edit the default commit message within this hook.\nIt has one to three arguments:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the first one is the name of the commit message file, such as .git/COMMIT_EDITMSG"),(0,n.kt)("li",{parentName:"ul"},"the second one is the source of the commit message. Sources can be:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"message"),"  if it commits with ",(0,n.kt)("inlineCode",{parentName:"li"},"-m")," or ",(0,n.kt)("inlineCode",{parentName:"li"},"-F")," option"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"template"),"  if it commits with ",(0,n.kt)("inlineCode",{parentName:"li"},"-t")," option"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"commit"),"  if it commits with ",(0,n.kt)("inlineCode",{parentName:"li"},"-c"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"-C")," or ",(0,n.kt)("inlineCode",{parentName:"li"},"--amend")," option"))),(0,n.kt)("li",{parentName:"ul"},"the last one is the commit HASH, it only exists if the source is ",(0,n.kt)("inlineCode",{parentName:"li"},"commit"))),(0,n.kt)("h3",{id:"3-commit-msg"},"3. commit-msg"),(0,n.kt)("p",null,"The hook is invoked after ",(0,n.kt)("strong",{parentName:"p"},'"finalized"')," the commit message, and it can be bypassed with ",(0,n.kt)("inlineCode",{parentName:"p"},"--no-verify"),". It takes only one argument that is the path of a file containing the final commit message. Normally, we inspect or format the message at this hook."),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},'The "final commit message" still can be changed within this hook.')),(0,n.kt)("br",null),(0,n.kt)("p",null,"Two ways to ",(0,n.kt)("strong",{parentName:"p"},'"finalize"')," commit message:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"git commit")," with messages."),(0,n.kt)("li",{parentName:"ol"},"Saved commit message in an editor.")),(0,n.kt)("h3",{id:"4-post-commit"},"4. post-commit"),(0,n.kt)("p",null,"The hook is always invoked after made a commit. It takes no arguments and is only used for notification."),(0,n.kt)("h3",{id:"5-pre-merge-commit"},"5. pre-merge-commit"),(0,n.kt)("p",null,"The hook is invoked by ",(0,n.kt)("inlineCode",{parentName:"p"},"git merge")," and can be bypassed with ",(0,n.kt)("inlineCode",{parentName:"p"},"--no-verify"),". It only executed if when a merge is carried out automatically and without ",(0,n.kt)("strong",{parentName:"p"},"mannually")," resolving conflicts, otherwise ",(0,n.kt)("strong",{parentName:"p"},"pre-commit")," will be called. The purpose of this hook is similar with pre-commit. "),(0,n.kt)("p",null,"For convenience, we can run ",(0,n.kt)("strong",{parentName:"p"},"pre-commit")," hook inside this hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash",metastring:"showLineNumbers",showLineNumbers:!0},'# pre-merge-commit.sh\n# run pre-commit inside the hook\nsource ".git/hooks/pre-commit"\n')),(0,n.kt)("p",null,"In a word, either pre-merge-commit or pre-commit is invoked right after ",(0,n.kt)("inlineCode",{parentName:"p"},"git merge"),"."),(0,n.kt)("h3",{id:"6-post-merge"},"6. post-merge"),(0,n.kt)("p",null,"The hook is invoked only if a merge is made without mannully resolving conflicts. It takes one argument that is a signal indicating whether the merge is squash merge or not. It can be used to restore"),(0,n.kt)("h3",{id:"7-pre-rebase"},"7. pre-rebase"),(0,n.kt)("p",null,"The hook is invoked by ",(0,n.kt)("inlineCode",{parentName:"p"},"git rebase")," and can be bypassed with ",(0,n.kt)("inlineCode",{parentName:"p"},"--no-verify"),". It takes one to two arguments:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"the <newbase",">",", it can be a branch name or a commit hash."),(0,n.kt)("li",{parentName:"ol"},"the name of the branch being rebased. ")),(0,n.kt)("h3",{id:"8-post-rewrite"},"8. post-rewrite"),(0,n.kt)("p",null,"The hook is "),(0,n.kt)("h3",{id:"9-post-checkout"},"9. post-checkout"),(0,n.kt)("h2",{id:"server-side-hooks"},"Server-side Hooks"),(0,n.kt)("h2",{id:"tools-for-hooks"},"Tools for hooks"),(0,n.kt)("h2",{id:"reference"},"Reference"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("a",{parentName:"li",href:"https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"},"Customizing Git - Git Hooks")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("a",{parentName:"li",href:"https://git-scm.com/docs/githooks"},"Git Hooks"))))}c.isMDXComponent=!0}}]);